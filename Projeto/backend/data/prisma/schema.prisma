// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String
  email String @unique
  password String
  firstname String
  lastname String
  gender Gender
  role Role @default(CLIENT)
  inService Boolean?
  cars Car[] @relation("UserCars")
  appointments Appointment[]
}

model Car {
  id Int @id @default(autoincrement())
  brand String
  model String
  year Int
  plate String @unique 
  color String
  door_number Int
  kilometers Int
  picture String
  user_id Int
  user User @relation("UserCars", fields: [user_id], references: [id])
  services CarsService[]
  appointments Appointment[]
}

model CarsService {
  carid Int
  serviceid Int
  car Car @relation(fields: [carid], references: [id])
  service Service @relation(fields: [serviceid], references: [id])

  @@id([carid, serviceid])
}

enum Role {
  ADMIN
  MECHANIC
  CLIENT
}

enum Gender {
  Male
  Female
}

model Service {
  id Int @id @default(autoincrement())
  name String
  description String
  price Decimal
  duration String
  status Status @default(Pending)
  type ServiceTypes
  carServices CarsService[]
  appointments Appointment[]
}

enum Status {
  Pending
  Confirmed
  Completed
}

enum ServiceTypes {
  Mechanic
  Painting
  Cleaning
}

model Appointment {
  id Int @id @default(autoincrement())
  title String
  start DateTime
  end DateTime
  status Status @default(Pending)
  user_id Int
  user User @relation(fields: [user_id], references: [id])
  car_id Int
  car Car @relation(fields: [car_id], references: [id])
  service_id Int
  service Service @relation(fields: [service_id], references: [id])
}