// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cars {
  car_id Int @id @default(autoincrement()) @unique
  brand String
  model String
  year Int
  plate String @unique 
  color String
  door_number Int
  kilometers Int
  picture String
  user_id Users @relation(fields[car_id], references[user_id])
}

model Users {
  user_id Int @id @default(autoincrement()) @unique
  username String
  email String @unique
  password String
  firsname String
  lastname String
  gender Gender
  account_status String
  role Role @default(CLIENT)
}

enum Role {
  ADMIN
  MECHANIC
  CLIENT
}

enum Gender {
  Masculin
  Feminine
}

model Services {
  service_id Int @id @unique
  service_name String
  service_description String
  service_price Decimal
  service_duration String
  service_status Status @default(Pending)
  car_id Cars @relation(fields: [car_id], references: [service_id])
}

enum Status {
  Pending
  Confirmed
  Completed
}

model Appointments {
  appointment_id Int @id @unique
  user_id Users @relation(fields: [appointment_id], references: [user_id])
  service_id Services @relation(fields: [appointment_id], references: [service_id])
  car_id Cars @relation(fields: [car_id], references: [appointment_id])
  appointment_datetime DateTime
  appointment_status Status @default(Pending)
}

model Invoices {
  invoice_id Int @id @unique
  appointment_id Appointments @relation(fields: [invoice_id], references: [appointment_id])
  invoice_total Decimal
  invoice_paymentstatus Payment
  invoice_dateissued DateTime
  invoice_datepayed DateTime
}

enum Payment {
  Pending
  Payed
}